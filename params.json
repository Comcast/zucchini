{"name":"Zucchini","tagline":"An army of zucchini zombies to take your cucumber testing to the next level","body":"# What is it?\r\n<div>Zucchini makes running the same cucumber tests across multiple different devices or browsers super simple.  Write the test for one device and watch it run on EVERYTHING!</div><div><img src=\"http://www.fruitycuties.com/images/humour/138-cartoon-zucchini-joke.gif\" alt=\"Zombie Zukes\" style=\"width: 200px;\"/></div>\r\n\r\n#  How do I use it?\r\n## write cucumber feature files\r\nA zucchini test makes use of feature files written in Gherkin as well as all the other great features of [cucumber-jvm](https://github.com/cucumber/cucumber-jvm) and [cucumber-reporting](https://github.com/masterthought/cucumber-reporting).  \r\n\r\nPlease refer to the excellent documentation available on [cukes.info](http://cukes.info/) for details on how to write great feature files.\r\n\r\n## add dependency to your project\r\nIf you are using maven for dependency management, add the artifact below to your pom (the artifacts are deployed to maven central):\r\n```xml\r\n<dependency>\r\n  <groupId>com.comcast.zucchini</groupId>\r\n  <artifactId>zucchini</artifactId>\r\n  <version>1.0-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\nIf you are managing your dependencies in some other way, manually download the jar and include it in your classpath in whatever way you feel comfortable\r\n\r\n## Configure your AbstractZucchiniTest\r\nTo make use of zucchini in a test, the easiest method is to implement the abstract test class:\r\n```java\r\nAbstractZucchiniTest\r\n```\r\nNext, override this method:\r\n```java\r\npublic List<TestContext> getTestContexts();\r\n```\r\nwithin that method, you will create a zucchini <code>TestContext</code>.  For details on the test context, please refer to the javadocs.  Put simply, a TestContext has a name and a Map of strings and java objects.  Its up to you what you put into the test context.  \r\n### Example\r\nThe example below is a common one which shows the power of zucchini.  Using this code (and a factory method to generate web driver objects) you can run your feature files against all the browsers your project supports, simultaneously.\r\n```java\r\npublic List<TestContext> getTestContexts() {\r\n\t// Create the list of test contexts.  Zucchini will run your tests against each of the test contexts\r\n\tList<TestContext> contexts = new ArrayList<TestContext>();\r\n\t// Create a list of the web browsers which we want to run the test against\r\n\tList<String> browsers = Arrays.asList(new String[] { \r\n\t\t\"CHROME\", \r\n\t\t\"FIREFOX\", \r\n\t\t\"SAFARI\", \r\n\t\t\"IPHONE_SAFARI\",\r\n\t\t\"IPAD_SAFARI\",\r\n\t\t\"ANDROID_BROWSER_PHONE\",\r\n\t\t\"ANDROID_BROWSER_TABLET\"});\r\n\r\n\t// Create a test context for each of the browsers we want to test against and populate it with a reference to the selenium webdriver object for each of them\r\n\tfor (String browser : browsers)\r\n\t{\r\n\t\t// Instantiate a selenium webdriver for the given browser name\r\n\t\tWebDriver webDriverObj = SeleniumWebDriverFactory.getWebDriver(browser);\r\n\t\t// Create a new hash map and add the newly created selenium web driver object to it with the name \"browser\"\r\n\t\tMap<String,Object> webDriverMap = new HashMap<String,Object>();\r\n\t\twebDriverMap.put(\"browser\", webDriverObj);\r\n\t\t// Create the test context object from the webDriverMap and name the test context after the browser object which it is providing\r\n\t\tcontexts.add(new TestContext(browser, webDriverMap));\r\n\t}\r\n}\r\n```\r\n## Getting objects from the test context\r\nFinally, you will need to get at the test context in your glue code in order to do something with the java objects you put in them.  This can be done using the following method:\r\n```java\r\nTestContext.getCurrent().get(String nameOfObject)\r\n```\r\n### Example\r\nUsing the previous example, if we wanted to get access to our SeleniumWebDriver object inside our glue code we would simply do the following\r\n```java\r\n\t@When(\"^i do something cool$\")\r\n\tpublic void loadTheHomePage() {\r\n\t\t// Get the WebDriver object out of the TestContext\r\n\t\tWebDriver webDriverObj = TestContext.getCurrent().get(\"browser\");\r\n\t\tBoolean result = webDriverObj.doSomethingCool();\r\n\t}\r\n```\r\n## Adding objects to the test context\r\nJust as you can obtain objects from the test context, you can just as easily add things into the test context for use in subsequent steps.  This can take the place of singleton object or other such things and should make your glue code simpler.  To set objects into the test context, you call this method:\r\n```java\r\nTestContext.getCurrent().set(String nameOfObject, Object objectReference)\r\n```\r\n### Example\r\nAgain using the previous example, if we 'did something cool' with the webDriverObject and wanted to save off the results, we can do so like so\r\n```java\r\n\t@When(\"^i do something cool$\")\r\n\tpublic void loadTheHomePage() {\r\n\t\t// Get the WebDriver object out of the TestContext\r\n\t\tWebDriver webDriverObj = TestContext.getCurrent().get(\"browser\");\r\n\t\tBoolean result = webDriverObj.doSomethingCool();\r\n\r\n\t\t// save off the boolean result from the doSomethingCool method\r\n\t\tTestContext.getCurrent().set(\"do-something-cool-result\", result);\r\n\t}\r\n\t@Then(\"^pay me lots of money$\")\r\n\tpublic void payMeMoney() {\r\n\t\t// Get the results of the page load from the test context\r\n\t\tBoolean somethingCoolHappened = TestContext.getCurrent().get(\"do-something-cool-result\");\r\n\t\tAssert.assertTrue(somethingCoolHappened,\"Something cool didnt happen, better luck next time\");\r\n\t}\r\n\r\n```\r\n# Working with existing cucumber projects\r\nComing soon!\r\n\r\n# Test Reporting\r\nComing soon!\r\n\r\n# Contributing\r\nWe welcome contributions to the project.  Please see [CONTRIBUTING](https://github.com/Comcast/zucchini/blob/develop/CONTRIBUTING.txt) for more details\r\n\r\n# Reporting issues\r\nComing soon!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}